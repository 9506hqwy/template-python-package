[project]
name = "PACKAGE_NAME"
version = "0.1.0"
authors = [{ name = "USERNAME" }]
description = "PACKAGE_DESCRIPTION"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
  # https://pypi.org/classifiers/
  "Development Status :: 1 - Planning",
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
requires-python = ">= 3.12"

[project.urls]
Homepage = "https://github.com/USERNAME/PACKAGE_NAME"

[build-system]
requires = ["uv_build>=0.7.19,<0.8.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
  "gprof2dot>=2025.4.14",
  "memray>=1.18.0",
  "mypy>=1.16.1",
  "pip-licenses>=5.0.0",
  "ruff>=0.12.2",
]
doc = ["sphinx>=8.2.3"]
test = [
  "pytest-benchmark>=5.1.0",
  "pytest-cov>=6.2.1",
  "pytest>=8.4.1",
  "tox-uv>=1.26.1",
  "tox>=4.27.0",
]

[tool.uv.build-backend]
module-name = "example"

[tool.mypy]
disallow_subclassing_any = true
disallow_untyped_defs = true
implicit_optional = false
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--benchmark-skip"
# occur `no-data-collected` at coverage if removed.
pythonpath = "src"

[tool.ruff]
# relaxed line length
line-length = 99

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
extend-select = [
  "ANN", # flake8-annotations (ANN)
  "S",   # flake8-bandit (S)
  "PYI", # flake8-pyi (PYI)
  "I",   # isort (I)
  "N",   # pep8-naming (N)
  "E",   # pycodestyle (E)
  "W",   # pycodestyle (W)
  "D",   # pydocstyle (D)
  "F",   # Pyflakes (F)
  "PL",  # Pylint (PL)
  "RUF", # Ruff-specific rules (RUF)
]
ignore = [
  "D203", # incorrect-blank-line-before-class (D203)
  "D213", # multi-line-summary-second-line (D213)
]

[tool.ruff.lint.per-file-ignores]
"test/*" = [
  "S101", # assert (S101)
  "D",    # pydocstyle (D)
]

[tool.tox]
legacy_tox_ini = """
[tox]
env_list =
  format
  lint
  type
  py312
  py313

[testenv]
deps =
  pytest
  pytest-benchmark
  pytest-cov
commands =
  pytest --cov-append --cov-branch --cov=src -v

[testenv:format]
deps = ruff
commands =
  ruff format --check

[testenv:lint]
deps = ruff
commands =
  ruff check

[testenv:type]
deps = mypy
commands =
  mypy ./src
"""
